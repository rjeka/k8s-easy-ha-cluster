
#Add directory for cert
- name: Add tmp directory
  hosts: localhost
  gather_facts: no

  tasks:
    - name: create temp cert directory
      file:
        path: /tmp/k8s
        state: directory
        force: yes

# Installing Kubernetes
- name: Installing shared packages and Kubernetes for the masters and work nodes
  hosts: masters:worknodes
  become: yes
  become_method: sudo

  tasks:
    - name: Install kubernetes
      include_role:
        name: kubelet

#Installing CRI - conainerd or docker
- name: Installing CRI
  hosts: [masters, worknodes]
  become: yes
  become_method: sudo

  tasks:
    - name: enable ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Install docker
      include_role:
        name: docker
      when: criType == "docker"

    - name: Install containerd
      include_role:
        name: containerd
      when: criType == "containerd"

#Install the soft that is only needed on the masters
- name: Setting Up kubernetes masters
  hosts: masters
  become: yes
  become_method: sudo

  tasks:
    - include_role:
        name: "{{ item }}"
      with_items:
      - etcd
      - keepalived
      - nginx


#Init First master
- name: Init first cluster master
  hosts: master1
  become: yes
  become_method: sudo

  tasks:
    - name: Reset Old Cluster and del docker containers
      shell: |
        kubeadm reset --force
      when: criType == "docker"

    - name: Reset Old Cluster and del crictl containers
      shell: |
        kubeadm reset --force --cri-socket /run/containerd/containerd.sock
      when: criType == "containerd"

    - name: Init First master {{ansible_hostname}}
      include_role:
        name: initMaster


- name: Init other masters
  hosts: master2:master3
  become: yes
  become_method: sudo

  tasks:
    - name: Reset Old Cluster and del docker containers
      shell: |
        kubeadm reset --force
      when: criType == "docker"

    - name: Reset Old Cluster and del crictl containers
      shell: |
        kubeadm reset --force --cri-socket /run/containerd/containerd.sock
      when: criType == "containerd"

    - name: Create PKI directory
      file:
        path: /etc/kubernetes/pki/
        state: directory
        group: root
        owner: root
        force: yes

    - name: copy certificate
      copy:
        src:  /tmp/k8s/master1/etc/kubernetes/pki/
        dest: /etc/kubernetes/pki/

    - name: init {{ansible_hostname}}
      include_role:
        name: initMaster

- name: Scale DNS to 2nd and 3rd master
  hosts: master1

  tasks:
    - name: Pause while callico starts
      pause:
        prompt: "Wait starting CIDR and Kubernetes coredns"
        seconds: 15

    - name: Scale DNS
      become_user: "{{ kubernetesUser }}"
      shell: |
        kubectl scale --replicas=4 -n kube-system deployment/coredns


- name: Change API IP address
  hosts: master1
  become: yes
  become_method: sudo

  tasks:
    - name: Create kube-proxy config file
      file:
        path: "{{ item }}"
        owner: "{{ kubernetesUser }}"
        mode: 0755
        state: touch
      with_items:
        - /opt/config/kube-proxy.txt
        - /opt/config/kube-api-configmap.yaml

    - name: Get kube-proxy config
      become_user: "{{ kubernetesUser }}"
      shell: |
        kubectl get -n kube-system configmap/kube-proxy -o yaml > /opt/config/kube-api-configmap.yaml

    - name: Replace API server export
      replace:
        dest: /opt/config/kube-api-configmap.yaml
        regexp: '6443'
        replace: '16443'

    - name: Reconfigure kube-proxy
      become_user: "{{ kubernetesUser }}"
      shell: |
        kubectl get pods --all-namespaces -o wide | grep proxy > /opt/config/kube-proxy.txt && \
        kubectl delete pod -n kube-system $(awk '{print $2}' /opt/config/kube-proxy.txt)


- name: Add worknodes in cluster
  hosts: worknodes
  become: yes
  become_method: sudo

  tasks:
    - name: add node to Cluster
      include_role:
        name: addWorkNode
